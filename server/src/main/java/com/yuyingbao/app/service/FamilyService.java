package com.yuyingbao.app.service;

import com.yuyingbao.app.model.entity.Family;
import com.yuyingbao.app.model.entity.FamilyMember;
import com.yuyingbao.app.model.entity.User;
import com.yuyingbao.app.model.enums.FamilyMemberRole;
import com.yuyingbao.app.repository.FamilyMemberRepository;
import com.yuyingbao.app.repository.FamilyRepository;
import com.yuyingbao.app.repository.UserRepository;
import org.springframework.stereotype.Service;

import java.security.SecureRandom;
import java.time.OffsetDateTime;
import java.util.HexFormat;
import java.util.List;

@Service
public class FamilyService {
	private final FamilyRepository familyRepository;
	private final FamilyMemberRepository familyMemberRepository;
	private final UserRepository userRepository;

	public FamilyService(FamilyRepository familyRepository, FamilyMemberRepository familyMemberRepository, UserRepository userRepository) {
		this.familyRepository = familyRepository;
		this.familyMemberRepository = familyMemberRepository;
		this.userRepository = userRepository;
	}

	public Family createFamily(Long creatorUserId) {
		// 获取创建者用户信息
		User creator = userRepository.findById(creatorUserId)
				.orElseThrow(() -> new IllegalArgumentException("用户不存在"));
		
		// 自动生成家庭名称
		String autoGeneratedName = generateFamilyName(creator.getNickname());
		
		Family family = Family.builder()
				.name(autoGeneratedName)
				.inviteCode(generateInviteCode())
				.creatorUserId(creatorUserId)
				.createdAt(OffsetDateTime.now())
				.build();
		family = familyRepository.save(family);
		FamilyMember fm = FamilyMember.builder()
				.familyId(family.getId())
				.userId(creatorUserId)
				.role("CREATOR")
				.joinedAt(OffsetDateTime.now())
				.build();
		familyMemberRepository.save(fm);
		return family;
	}

	public Family joinFamily(Long userId, String inviteCode) {
		Family family = familyRepository.findByInviteCode(inviteCode)
				.orElseThrow(() -> new IllegalArgumentException("无效的邀请码"));
		familyMemberRepository.findByFamilyIdAndUserId(family.getId(), userId).ifPresent(fm -> {
			throw new IllegalArgumentException("已加入该家庭");
		});
		FamilyMember fm = FamilyMember.builder()
				.familyId(family.getId())
				.userId(userId)
				.role("MEMBER")
				.joinedAt(OffsetDateTime.now())
				.build();
		familyMemberRepository.save(fm);
		return family;
	}

	public Family getFamilyById(Long familyId) {
		return familyRepository.findById(familyId)
				.orElseThrow(() -> new IllegalArgumentException("家庭不存在"));
	}

	public Family getFamilyByInviteCode(String inviteCode) {
		return familyRepository.findByInviteCode(inviteCode)
				.orElseThrow(() -> new IllegalArgumentException("无效的邀请码"));
	}

	public List<FamilyMember> listMembers(Long familyId) {
		return familyMemberRepository.findByFamilyId(familyId);
	}

	public List<FamilyMember> listFamilyMembersByUserId(Long userId) {
		return familyMemberRepository.findByUserId(userId);
	}

	public FamilyMember updateMemberRole(Long familyId, Long memberId, FamilyMemberRole memberRole) {
		// 验证家庭成员是否存在
		FamilyMember familyMember = familyMemberRepository.findByIdAndFamilyId(memberId, familyId)
				.orElseThrow(() -> new IllegalArgumentException("家庭成员不存在"));

		// 更新成员角色
		familyMember.setMemberRole(memberRole);
		return familyMemberRepository.save(familyMember);
	}

	/**
	 * 自动生成家庭名称
	 * 规则：用户昵称 + "的家庭"
	 * 如果有重复，则添加 "#随机4位数字"
	 */
	private String generateFamilyName(String userNickname) {
		String baseName = userNickname + "的家庭";
		
		// 检查是否已存在相同名称
		if (!familyRepository.findByName(baseName).isPresent()) {
			// 没有重复，直接返回基础名称
			return baseName;
		}
		
		// 存在重复，添加随机数字后缀
		// 最多尝试100次，避免无限循环
		int maxAttempts = 100;
		String uniqueName = null;
		
		for (int i = 0; i < maxAttempts; i++) {
			// 生成4位随机数字
			int randomNum = new SecureRandom().nextInt(9000) + 1000; // 1000-9999
			String candidateName = baseName + "#" + randomNum;
			
			if (!familyRepository.findByName(candidateName).isPresent()) {
				uniqueName = candidateName;
				break;
			}
		}
		
		// 如果100次都重复，使用时间戳作为后缀
		if (uniqueName == null) {
			long timestamp = System.currentTimeMillis();
			uniqueName = baseName + "#" + (timestamp % 10000);
		}
		
		return uniqueName;
	}

	private String generateInviteCode() {
		byte[] bytes = new byte[4];
		new SecureRandom().nextBytes(bytes);
		return HexFormat.of().withUpperCase().formatHex(bytes);
	}

	public boolean checkFamilyNameExists(String name) {
		return familyRepository.findByName(name).isPresent();
	}
}